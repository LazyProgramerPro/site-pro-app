import axios, {
  AxiosError,
  AxiosInstance,
  AxiosRequestConfig,
  CancelTokenSource,
} from "axios";
import { Platform } from "react-native";
import { logout } from "../redux/slices/authSlice";
import store from "../redux/store";
import { tokenService } from "../services/token-service";

// Interface cho config c√≥ th·ªÉ abort
interface ConfigWithAbort extends AxiosRequestConfig {
  abort?: (cancel: (reason?: string) => void) => void;
}

// Flag ƒë·ªÉ tr√°nh c√°c request refreshToken ƒë·ªìng th·ªùi
let isRefreshing = false;
// M·∫£ng c√°c request ƒëang ƒë·ª£i token m·ªõi
let failedQueue: Array<{
  resolve: (value: unknown) => void;
  reject: (reason?: any) => void;
}> = [];

const axiosParams: AxiosRequestConfig = {
  baseURL:
    process.env.NODE_ENV === "development"
      ? Platform.OS === "android"
        ? "https://api.sitepro.vn" // ƒê·∫∑c bi·ªát cho Android Emulator
        : "https://api.sitepro.vn" // IP m√°y th·∫≠t cho c√°c thi·∫øt b·ªã kh√°c
      : "https://api.sitepro.vn",
};

// T·∫°o instance
const axiosInstance: AxiosInstance = axios.create(axiosParams);

// X·ª≠ l√Ω c√°c request ƒëang ƒë·ª£i sau khi c√≥ token m·ªõi
const processQueue = (error: any = null) => {
  failedQueue.forEach((prom) => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(null);
    }
  });

  failedQueue = [];
};

// üìå Interceptor Request: th√™m token v√†o header
axiosInstance.interceptors.request.use(
  async (config) => {
    const token = tokenService.getAccessToken();

    // N·∫øu c√≥ token v√† route kh√¥ng ph·∫£i l√† refresh token
    if (token && !config.url?.includes("/auth/user/refresh-token")) {
      config.headers = config.headers || {};
      config.headers["Authorization"] = `Bearer ${token}`;

      // N·∫øu token s·∫Øp h·∫øt h·∫°n v√† ch∆∞a c√≥ request refresh n√†o ƒëang ch·∫°y
      if (tokenService.isTokenExpiringSoon() && !isRefreshing) {
        isRefreshing = true;

        try {
          // Th·ª±c hi·ªán refresh token
          await tokenService.refreshAccessToken();

          // C·∫≠p nh·∫≠t token m·ªõi cho request hi·ªán t·∫°i
          const newToken = tokenService.getAccessToken();
          config.headers["Authorization"] = `Bearer ${newToken}`;
        } catch (error) {
          console.error("L·ªói khi refresh token", error);
          // N·∫øu refresh th·∫•t b·∫°i, ƒëƒÉng xu·∫•t ng∆∞·ªùi d√πng
          tokenService.clearTokenRefresh(); // X√≥a c∆° ch·∫ø refresh token t·ª± ƒë·ªông
          store.dispatch(logout());
        } finally {
          isRefreshing = false;
        }
      }
    }

    return config;
  },
  (error) => Promise.reject(error)
);

// üìå Interceptor Response: x·ª≠ l√Ω l·ªói 401 v√† response data
axiosInstance.interceptors.response.use(
  (response) => response.data,
  async (error) => {
    const originalRequest = error.config;

    // N·∫øu l·ªói 401 Unauthorized v√† ch∆∞a th·ª≠ l·∫°i
    if (error?.response?.status === 401 && !originalRequest._retry) {
      if (isRefreshing) {
        // N·∫øu ƒëang refresh, ƒë∆∞a request v√†o h√†ng ƒë·ª£i
        return new Promise((resolve, reject) => {
          failedQueue.push({ resolve, reject });
        })
          .then(() => {
            originalRequest.headers[
              "Authorization"
            ] = `Bearer ${tokenService.getAccessToken()}`;
            return axiosInstance(originalRequest);
          })
          .catch((err) => Promise.reject(err));
      }

      // ƒê√°nh d·∫•u request n√†y ƒë√£ th·ª≠ refresh
      originalRequest._retry = true;
      isRefreshing = true;

      try {
        // Th·ª±c hi·ªán refresh token
        await tokenService.refreshAccessToken();

        // C·∫≠p nh·∫≠t token m·ªõi cho request
        const token = tokenService.getAccessToken();
        originalRequest.headers["Authorization"] = `Bearer ${token}`;

        // B√°o th√†nh c√¥ng cho c√°c request ƒëang ƒë·ª£i
        processQueue();

        // Th·ª≠ l·∫°i request ban ƒë·∫ßu
        return axiosInstance(originalRequest);
      } catch (refreshError) {
        // B√°o l·ªói cho c√°c request ƒëang ƒë·ª£i
        processQueue(refreshError);

        // N·∫øu refresh th·∫•t b·∫°i, ƒëƒÉng xu·∫•t ng∆∞·ªùi d√πng
        tokenService.clearTokenRefresh(); // X√≥a c∆° ch·∫ø refresh token t·ª± ƒë·ªông
        store.dispatch(logout());
        return Promise.reject(refreshError);
      } finally {
        isRefreshing = false;
      }
    }

    return Promise.reject(error);
  }
);

export const didAbort = (error: unknown): { aborted: boolean } | false =>
  axios.isCancel(error) && { aborted: true };

const getCancelSource = (): CancelTokenSource => axios.CancelToken.source();

export const isApiError = (error: unknown): error is AxiosError =>
  axios.isAxiosError(error);

const withAbort = <T>(fn: Function) => {
  const executor = async (...args: any[]): Promise<T> => {
    const originalConfig: ConfigWithAbort = args[args.length - 1];
    const { abort, ...config } = originalConfig;

    if (typeof abort === "function") {
      const { cancel, token } = getCancelSource();
      config.cancelToken = token;
      abort(cancel);
    }

    try {
      if (args.length > 2) {
        const [url, body] = args;
        return await fn(url, body, config);
      } else {
        const [url] = args;
        return await fn(url, config);
      }
    } catch (error) {
      console.log("api error", error);

      if (didAbort(error)) {
        (error as any).aborted = true;
      }

      throw error;
    }
  };

  return executor;
};

interface Http {
  get: <T = any>(url: string, config?: ConfigWithAbort) => Promise<T>;
  delete: <T = any>(url: string, config?: ConfigWithAbort) => Promise<T>;
  post: <T = any>(
    url: string,
    body: any,
    config?: ConfigWithAbort
  ) => Promise<T>;
  patch: <T = any>(
    url: string,
    body: any,
    config?: ConfigWithAbort
  ) => Promise<T>;
  put: <T = any>(
    url: string,
    body: any,
    config?: ConfigWithAbort
  ) => Promise<T>;
}

const http = (axios: AxiosInstance): Http => {
  return {
    get: <T = any>(url: string, config: ConfigWithAbort = {}) =>
      withAbort<T>(axios.get)(url, config),
    delete: <T = any>(url: string, config: ConfigWithAbort = {}) =>
      withAbort<T>(axios.delete)(url, config),
    post: <T = any>(url: string, body: any, config: ConfigWithAbort = {}) =>
      withAbort<T>(axios.post)(url, body, config),
    patch: <T = any>(url: string, body: any, config: ConfigWithAbort = {}) =>
      withAbort<T>(axios.patch)(url, body, config),
    put: <T = any>(url: string, body: any, config: ConfigWithAbort = {}) =>
      withAbort<T>(axios.put)(url, body, config),
  };
};

export default http(axiosInstance);
