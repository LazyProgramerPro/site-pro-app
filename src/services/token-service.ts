// src/services/token-service.ts
import store from "../redux/store";
import { logout, saveAuth } from "../redux/slices/authSlice";
import http from "../utils/http";

/**
 * Response t·ª´ API refresh token theo format c·ªßa backend
 */
interface ApiResponse<T> {
  rc: {
    code: number;
    desc: string;
  };
  auth: T;
}

interface RefreshTokenData {
  access_token: string;
  refresh_token: string;
  expires_in: number;
  refresh_expires_in: number;
}

type RefreshTokenResponse = ApiResponse<RefreshTokenData>;

/**
 * Service qu·∫£n l√Ω token authentication v·ªõi auto refresh
 */
class TokenService {
  private refreshTimer: NodeJS.Timeout | null = null;
  private isRefreshing = false;
  private refreshPromise: Promise<boolean> | null = null;

  /**
   * L·∫•y access token hi·ªán t·∫°i t·ª´ Redux store
   */
  getAccessToken(): string | null {
    return store.getState().auth.token;
  }

  /**
   * L·∫•y refresh token hi·ªán t·∫°i t·ª´ Redux store
   */
  getRefreshToken(): string | null {
    return store.getState().auth.refreshToken;
  }

  /**
   * Ki·ªÉm tra access token c√≥ h·∫øt h·∫°n kh√¥ng
   */
  isAccessTokenExpired(): boolean {
    const { expiresAt } = store.getState().auth;
    if (!expiresAt) return true;
    return Date.now() >= expiresAt;
  }

  /**
   * Ki·ªÉm tra access token c√≥ s·∫Øp h·∫øt h·∫°n kh√¥ng (buffer = 60s)
   */
  isAccessTokenExpiringSoon(bufferSeconds = 60): boolean {
    const { expiresAt } = store.getState().auth;
    if (!expiresAt) return true;
    return Date.now() + bufferSeconds * 1000 >= expiresAt;
  }

  /**
   * Ki·ªÉm tra refresh token c√≥ c√≤n h·∫°n s·ª≠ d·ª•ng kh√¥ng
   */
  isRefreshTokenValid(): boolean {
    const { refreshExpiresAt } = store.getState().auth;
    if (!refreshExpiresAt) return false;
    return Date.now() < refreshExpiresAt;
  }

  /**
   * Setup timer t·ª± ƒë·ªông refresh token tr∆∞·ªõc khi h·∫øt h·∫°n
   */
  setupAutoRefresh(): void {
    this.clearAutoRefresh();

    const { expiresAt } = store.getState().auth;
    if (!expiresAt) return;

    // T√≠nh th·ªùi gian c√≤n l·∫°i ƒë·∫øn khi c·∫ßn refresh (tr∆∞·ªõc 60s)
    const bufferMs = 60 * 1000; // 60 gi√¢y buffer
    const refreshTime = expiresAt - Date.now() - bufferMs;

    if (refreshTime > 0) {
      this.refreshTimer = setTimeout(() => {
        this.refreshAccessToken();
      }, refreshTime);

      console.log(
        `üîÑ Auto refresh scheduled in ${Math.round(refreshTime / 1000)}s`
      );
    } else {
      // Token ƒë√£ h·∫øt h·∫°n ho·∫∑c s·∫Øp h·∫øt h·∫°n, refresh ngay
      this.refreshAccessToken();
    }
  }

  /**
   * H·ªßy timer auto refresh
   */
  clearAutoRefresh(): void {
    if (this.refreshTimer) {
      clearTimeout(this.refreshTimer);
      this.refreshTimer = null;
    }
  }

  /**
   * Refresh access token
   * @returns Promise<boolean> - true n·∫øu refresh th√†nh c√¥ng
   */
  async refreshAccessToken(): Promise<boolean> {
    // N·∫øu ƒëang refresh, tr·∫£ v·ªÅ promise hi·ªán t·∫°i
    if (this.isRefreshing && this.refreshPromise) {
      return this.refreshPromise;
    }

    // Ki·ªÉm tra refresh token c√≤n h·∫°n kh√¥ng
    if (!this.isRefreshTokenValid()) {
      console.log("üî¥ Refresh token expired, redirecting to login");
      this.forceLogout();
      return false;
    }

    this.isRefreshing = true;

    this.refreshPromise = this.performRefresh();
    const result = await this.refreshPromise;

    this.isRefreshing = false;
    this.refreshPromise = null;

    return result;
  }
  /**
   * Th·ª±c hi·ªán refresh token
   */
  private async performRefresh(): Promise<boolean> {
    try {
      const refreshToken = this.getRefreshToken();
      if (!refreshToken) {
        throw new Error("No refresh token available");
      }

      console.log("üîÑ Refreshing access token...");

      const response: RefreshTokenResponse = await http.post(
        "/auth/user/refresh-token",
        {
          token: refreshToken,
        }
      );

      console.log("üîÑ Refresh token response:", response);

      // Ki·ªÉm tra response code
      if (response.rc.code !== 0) {
        throw new Error(`API Error: ${response.rc.desc}`);
      }

      // L·∫•y data t·ª´ auth object
      const authData = response.auth;
      if (!authData.access_token || !authData.refresh_token) {
        throw new Error("Invalid response: missing tokens");
      }

      // T√≠nh th·ªùi gian h·∫øt h·∫°n m·ªõi
      const now = Date.now();
      const expiresAt = now + authData.expires_in * 1000;
      const refreshExpiresAt = now + authData.refresh_expires_in * 1000;

      // C·∫≠p nh·∫≠t token m·ªõi v√†o Redux
      await store.dispatch(
        saveAuth({
          token: authData.access_token,
          refreshToken: authData.refresh_token,
          expiresAt,
          refreshExpiresAt,
          user: store.getState().auth.user, // Gi·ªØ nguy√™n user hi·ªán t·∫°i
        })
      );

      console.log("‚úÖ Token refreshed successfully");

      // Setup timer cho l·∫ßn refresh ti·∫øp theo
      this.setupAutoRefresh();

      return true;
    } catch (error) {
      console.error("‚ùå Failed to refresh token:", error);

      // N·∫øu refresh th·∫•t b·∫°i, c√≥ th·ªÉ do refresh token h·∫øt h·∫°n
      this.forceLogout();
      return false;
    }
  }

  /**
   * B·∫Øt bu·ªôc logout user
   */
  private forceLogout(): void {
    this.clearAutoRefresh();
    store.dispatch(logout());
  }

  /**
   * Kh·ªüi t·∫°o token service khi app start
   */
  initialize(): void {
    const { token, refreshExpiresAt } = store.getState().auth;

    if (!token) return;

    // Ki·ªÉm tra refresh token c√≤n h·∫°n kh√¥ng
    if (!this.isRefreshTokenValid()) {
      console.log("üî¥ Refresh token expired on init, logging out");
      this.forceLogout();
      return;
    }

    // N·∫øu access token ƒë√£ h·∫øt h·∫°n, refresh ngay
    if (this.isAccessTokenExpired()) {
      console.log("üîÑ Access token expired on init, refreshing...");
      this.refreshAccessToken();
    } else {
      // Setup auto refresh
      this.setupAutoRefresh();
    }
  }

  /**
   * Cleanup khi app unmount
   */
  cleanup(): void {
    this.clearAutoRefresh();
  }
}

export const tokenService = new TokenService();
