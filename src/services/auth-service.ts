// src/services/auth-service.ts
import { saveAuth } from "../redux/slices/authSlice";
import store from "../redux/store";
import http from "../utils/http";
import { tokenService } from "./token-service";

/**
 * Service xá»­ lÃ½ cÃ¡c thao tÃ¡c liÃªn quan Ä‘áº¿n authentication
 */
class AuthService {
  /**
   * Láº¥y access token hiá»‡n táº¡i tá»« Redux store
   * @returns string | null
   */
  getAccessToken(): string | null {
    return store.getState().auth.token;
  }

  /**
   * Kiá»ƒm tra user cÃ³ Ä‘ang Ä‘Äƒng nháº­p khÃ´ng
   */
  isAuthenticated(): boolean {
    return store.getState().auth.isAuthenticated;
  }

  /**
   * Kiá»ƒm tra token cÃ³ há»£p lá»‡ khÃ´ng (chÆ°a háº¿t háº¡n)
   */
  isTokenValid(): boolean {
    const { token, expiresAt } = store.getState().auth;
    if (!token || !expiresAt) return false;
    return Date.now() < expiresAt;
  }

  /**
   * Khá»Ÿi táº¡o auth service khi app start
   * Kiá»ƒm tra vÃ  refresh token náº¿u cáº§n
   */
  async initialize(): Promise<void> {
    const { token, refreshToken } = store.getState().auth;

    if (!token || !refreshToken) {
      return;
    }

    // Náº¿u access token háº¿t háº¡n nhÆ°ng refresh token cÃ²n háº¡n
    if (!this.isTokenValid() && tokenService.isRefreshTokenValid()) {
      console.log("ðŸ”„ Access token expired on app start, refreshing...");
      await tokenService.refreshAccessToken();
    }

    // Khá»Ÿi táº¡o token service
    tokenService.initialize();
  }
}

export const authService = new AuthService();
